{"version":3,"sources":["Components/AddItemForm.tsx","Components/EditableSpan/EditableSpan.tsx","TodoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","addItem","trimmedTitle","trim","TextField","value","onChange","event","currentTarget","onKeyPress","key","size","helperText","label","variant","IconButton","onClick","color","AddBox","EditableSpan","editMode","setEditMode","offEditMode","changeTitle","onBlur","autoFocus","onDoubleClick","TodoList","tasksJSXElements","tasks","map","t","id","Checkbox","checked","isDone","e","changeTaskStatus","changeTaskTitle","removeTask","Delete","changeTodoListTitle","removeTodolist","addTask","style","listStyle","Button","filter","changeFilter","margin","App","todoListID_1","v1","todoListID_2","React","todoLists","setTodoLists","setTasks","taskID","todoListID","newTask","tl","copyTasks","todoListComponents","tasksForTodoList","Grid","item","Paper","elevation","padding","className","AppBar","position","Toolbar","justifyContent","edge","aria-label","Menu","Typography","Container","fixed","container","newTodoListID","newTodoList","spacing","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.86580f8c.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nfunction AddItemForm(props: AddItemFormPropsType) {\r\n    const [title, setTitle] = useState<string>(\"\")\r\n    const [error, setError] = useState<boolean>(false)\r\n\r\n    const changeTitle = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setError(false)\r\n        setTitle(event.currentTarget.value)\r\n    }\r\n\r\n    const addItem = () => {\r\n        const trimmedTitle = title.trim()\r\n        if (trimmedTitle){\r\n            props.addItem(trimmedTitle)\r\n        } else {\r\n            setError(true)\r\n        }\r\n        setTitle(\"\")\r\n    }\r\n\r\n    const onKeyPressAddTask = (event: KeyboardEvent<HTMLInputElement>) => {\r\n        if(event.key === \"Enter\"){\r\n            addItem()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                value={title}\r\n                onChange={changeTitle}\r\n                onKeyPress={onKeyPressAddTask}\r\n                size={\"small\"}\r\n                error={error}\r\n                helperText={error && \"Title is required!\"}\r\n                label={\"Title\"}\r\n                variant={\"outlined\"}\r\n            />\r\n            <IconButton\r\n                onClick={addItem}\r\n                color={\"primary\"}\r\n                size={\"small\"}\r\n            >\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddItemForm;","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    changeTitle: (title: string) => void\r\n}\r\n\r\nfunction EditableSpan(props: EditableSpanPropsType) {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [title, setTitle] = useState<string>(props.title)\r\n\r\n    const changeTitle = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(event.currentTarget.value)\r\n    }\r\n    const onEditMode = () => setEditMode(true)\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.changeTitle(title)\r\n    }\r\n    const onKeyPressOffEditMode = (event: KeyboardEvent<HTMLInputElement>) => {\r\n        if (event.key === 'Enter') {\r\n            offEditMode()\r\n        }\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? <TextField\r\n                onChange={changeTitle}\r\n                value={title}\r\n                onBlur={offEditMode}\r\n                autoFocus\r\n                onKeyPress={onKeyPressOffEditMode}\r\n            />\r\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n    )\r\n}\r\n\r\nexport default EditableSpan","import React, {ChangeEvent} from \"react\";\r\nimport {FilterValuesType} from \"./App\";\r\nimport AddItemForm from \"./Components/AddItemForm\";\r\nimport EditableSpan from \"./Components/EditableSpan/EditableSpan\";\r\nimport {Button, Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\n\r\ntype TodoListPropsType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskID: string, todoListID: string) => void\r\n    changeFilter: (filter: FilterValuesType, todoListID: string) => void\r\n    changeTaskStatus: (taskID: string, isDone: boolean, todoListID: string) => void\r\n    addTask: (title: string, todoListID: string) => void\r\n    removeTodolist: (todoListID: string) => void\r\n    changeTaskTitle: (taskID: string, todoListID: string, id: string) => void\r\n    changeTodoListTitle: (taskID: string, todoListID: string) => void\r\n}\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\nfunction TodoList(props: TodoListPropsType) {\r\n    const getTaskJSXElement = (t: TaskType) => {\r\n        const removeTask = () => props.removeTask(t.id, props.id)\r\n        const changeTaskStatus = (e: ChangeEvent<HTMLInputElement>) =>\r\n            props.changeTaskStatus(t.id, e.currentTarget.checked, props.id)\r\n        const changeTaskTitle = (title: string) => props.changeTaskTitle(t.id, title, props.id)\r\n        return (\r\n            <li key={t.id}>\r\n                <Checkbox\r\n                    size={\"small\"}\r\n                    color={\"primary\"}\r\n                    checked={t.isDone}\r\n                    onChange={changeTaskStatus}\r\n                />\r\n                <EditableSpan title={t.title} changeTitle={changeTaskTitle}/>\r\n                <IconButton\r\n                    onClick={removeTask}\r\n                    size={\"small\"}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </li>\r\n        )\r\n    }\r\n    const tasksJSXElements = props.tasks.map(getTaskJSXElement)\r\n    const setAllFilterValue = () => props.changeFilter(\"all\", props.id)\r\n    const setActiveFilterValue = () => props.changeFilter(\"active\", props.id)\r\n    const setCompletedFilterValue = () => props.changeFilter(\"completed\", props.id)\r\n    const removeTodoList = () => props.removeTodolist(props.id)\r\n    const addTask = (title: string) => props.addTask(title, props.id)\r\n    const changeTodoListTitle = (title: string) => props.changeTodoListTitle(title, props.id)\r\n\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <EditableSpan title={props.title} changeTitle={changeTodoListTitle}/>\r\n                <IconButton\r\n                    onClick={removeTodoList}\r\n                    size={\"small\"}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={addTask}/>\r\n            <ul style={{listStyle: \"none\"}}>\r\n                {tasksJSXElements}\r\n            </ul>\r\n            <div>\r\n                <Button\r\n                    size={\"small\"}\r\n                    variant={\"contained\"}\r\n                    color={props.filter === \"all\" ? \"primary\" : \"default\"}\r\n                    onClick={setAllFilterValue}\r\n                    style={{margin: \"0 3px\"}}\r\n                >All\r\n                </Button>\r\n                <Button\r\n                    size={\"small\"}\r\n                    variant={\"contained\"}\r\n                    color={props.filter === \"active\" ? \"primary\" : \"default\"}\r\n                    onClick={setActiveFilterValue}\r\n                    style={{margin: \"0 3px\"}}\r\n                >Active\r\n                </Button>\r\n                <Button\r\n                    size={\"small\"}\r\n                    variant={\"contained\"}\r\n                    color={props.filter === \"completed\" ? \"primary\" : \"default\"}\r\n                    onClick={setCompletedFilterValue}\r\n                >Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoList;","import React from 'react';\r\nimport './App.css';\r\nimport TodoList, {TaskType} from \"./TodoList\";\r\nimport {v1} from \"uuid\";\r\nimport AddItemForm from \"./Components/AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\n\r\ntype TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\ntype TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction App() {\r\n    const todoListID_1 = v1()\r\n    const todoListID_2 = v1()\r\n    const [todoLists, setTodoLists] = React.useState<Array<TodoListType>>([\r\n        {id: todoListID_1, title: \"What to learn\", filter: \"all\"},\r\n        {id: todoListID_2, title: \"What to buy\", filter: \"all\"},\r\n    ])\r\n\r\n    const [tasks, setTasks] = React.useState<TasksStateType>({\r\n        [todoListID_1]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true},\r\n            {id: v1(), title: \"React\", isDone: false}\r\n        ],\r\n        [todoListID_2]: [\r\n            {id: v1(), title: \"Beer\", isDone: true},\r\n            {id: v1(), title: \"Fish\", isDone: true},\r\n            {id: v1(), title: \"Meat\", isDone: false}\r\n        ]\r\n    })\r\n\r\n    const removeTask = (taskID: string, todoListID: string) => {\r\n        tasks[todoListID] = tasks[todoListID].filter(t => t.id !== taskID)\r\n        setTasks({...tasks})\r\n    }\r\n    const addTask = (title: string, todoListID: string) => {\r\n        const newTask: TaskType = {\r\n            id: v1(),\r\n            title: title,\r\n            isDone: false\r\n        }\r\n        tasks[todoListID] = [newTask, ...tasks[todoListID]]\r\n        setTasks({...tasks})\r\n    }\r\n    const changeTaskStatus = (taskID: string, isDone: boolean, todoListID: string) => {\r\n        tasks[todoListID] = tasks[todoListID]\r\n            .map(t => t.id === taskID ? {...t, isDone: isDone} : t)\r\n        setTasks({...tasks})\r\n    }\r\n    const changeTaskTitle = (taskID: string, title: string, todoListID: string) => {\r\n        tasks[todoListID] = tasks[todoListID]\r\n            .map(t => t.id === taskID ? {...t, title: title} : t)\r\n        setTasks({...tasks})\r\n    }\r\n    const changeFilter = (filter: FilterValuesType, todoListID: string) => {\r\n        setTodoLists(todoLists.map(tl => tl.id === todoListID ? {...tl, filter: filter} : tl))\r\n    }\r\n    const removeTodolist = (todoListID: string) => {\r\n        setTodoLists(todoLists.filter(tl => tl.id !== todoListID))\r\n        const copyTasks = {...tasks}\r\n        delete copyTasks[todoListID]\r\n        setTasks(copyTasks)\r\n    }\r\n    const addTodoList = (title: string) => {\r\n        const newTodoListID = v1()\r\n        const newTodoList: TodoListType = {\r\n            id: newTodoListID,\r\n            title,\r\n            filter: \"all\"\r\n        }\r\n        setTodoLists([...todoLists, newTodoList])\r\n        setTasks({...tasks, [newTodoListID]: []})\r\n    }\r\n    const changeTodoListTitle = (title: string, todoListID: string) => {\r\n        setTodoLists(todoLists.map(tl => tl.id === todoListID ? {...tl, title: title} : tl))\r\n    }\r\n\r\n    const todoListComponents = todoLists.map(tl => {\r\n        let tasksForTodoList = tasks[tl.id]\r\n        if (tl.filter === \"active\") {\r\n            tasksForTodoList = tasks[tl.id].filter(t => !t.isDone)\r\n        }\r\n        if (tl.filter === \"completed\") {\r\n            tasksForTodoList = tasks[tl.id].filter(t => t.isDone)\r\n        }\r\n\r\n        return (\r\n            <Grid item key={tl.id}>\r\n                <Paper elevation={5} style={{padding: \"10px\"}}>\r\n                    <TodoList\r\n                        id={tl.id}\r\n                        filter={tl.filter}\r\n                        title={tl.title}\r\n                        tasks={tasksForTodoList}\r\n                        addTask={addTask}\r\n                        removeTask={removeTask}\r\n                        removeTodolist={removeTodolist}\r\n                        changeFilter={changeFilter}\r\n                        changeTaskStatus={changeTaskStatus}\r\n                        changeTaskTitle={changeTaskTitle}\r\n                        changeTodoListTitle={changeTodoListTitle}\r\n                    />\r\n                </Paper>\r\n            </Grid>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar style={{justifyContent: \"space-between\"}}>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        Todolists\r\n                    </Typography>\r\n                    <Button\r\n                        variant={\"outlined\"}\r\n                        color=\"inherit\"\r\n                    >\r\n                        Login\r\n                    </Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"10px 0px\"}}>\r\n                    <AddItemForm addItem={addTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={5}>\r\n                    {todoListComponents}\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}