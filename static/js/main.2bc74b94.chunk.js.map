{"version":3,"sources":["Components/AddItemForm.tsx","Components/EditableSpan/EditableSpan.tsx","TodoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","addItem","trimmedTitle","trim","userMsg","style","color","className","value","onChange","event","currentTarget","onKeyPress","key","onClick","EditableSpan","editMode","setEditMode","offEditMode","changeTitle","onBlur","autoFocus","onDoubleClick","TodoList","tasksJSXElements","tasks","map","t","id","type","checked","isDone","e","changeTaskStatus","changeTaskTitle","removeTask","allBtnClass","filter","activeBtnClass","completedBtnClass","changeTodoListTitle","removeTodolist","addTask","changeFilter","App","todoListID_1","v1","todoListID_2","React","todoLists","setTodoLists","setTasks","taskID","todoListID","newTask","tl","copyTasks","todoListComponents","tasksForTodoList","newTodoListID","newTodoList","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"oOA+CeA,MAzCf,SAAqBC,GAA8B,IAAD,EACpBC,mBAAiB,IADG,mBACvCC,EADuC,KAChCC,EADgC,OAEpBF,oBAAkB,GAFE,mBAEvCG,EAFuC,KAEhCC,EAFgC,KASxCC,EAAU,WACZ,IAAMC,EAAeL,EAAMM,OACvBD,EACAP,EAAMM,QAAQC,GAEdF,GAAS,GAEbF,EAAS,KASPM,EAAUL,EAAQ,yBAAKM,MAAO,CAACC,MAAO,QAApB,sBAAuD,KAE/E,OACI,6BACI,2BACIC,UAAWR,EAAQ,QAAU,GAC7BS,MAAOX,EACPY,SA5BQ,SAACC,GACjBV,GAAS,GACTF,EAASY,EAAMC,cAAcH,QA2BrBI,WAdc,SAACF,GACN,UAAdA,EAAMG,KACLZ,OAcA,4BAAQa,QAASb,GAAjB,KACCG,ICJEW,MA/Bf,SAAsBpB,GAA+B,IAAD,EAChBC,oBAAkB,GADF,mBACzCoB,EADyC,KAC/BC,EAD+B,OAEtBrB,mBAAiBD,EAAME,OAFD,mBAEzCA,EAFyC,KAElCC,EAFkC,KAQ1CoB,EAAc,WAChBD,GAAY,GACZtB,EAAMwB,YAAYtB,IAQtB,OACImB,EACM,2BACEP,SAjBQ,SAACC,GACjBZ,EAASY,EAAMC,cAAcH,QAiBrBA,MAAOX,EACPuB,OAAQF,EACRG,WAAW,EACXT,WAbkB,SAACF,GACT,UAAdA,EAAMG,KACNK,OAaE,0BAAMI,cApBG,kBAAML,GAAY,KAoBOtB,EAAME,QCoDvC0B,MA7Df,SAAkB5B,GACd,IAiBM6B,EAAmB7B,EAAM8B,MAAMC,KAjBX,SAACC,GAKvB,OACI,wBAAId,IAAKc,EAAEC,IACP,2BACIC,KAAK,WACLC,QAASH,EAAEI,OACXtB,SARa,SAACuB,GAAD,OACrBrC,EAAMsC,iBAAiBN,EAAEC,GAAII,EAAErB,cAAcmB,QAASnC,EAAMiC,OASxD,kBAAC,EAAD,CAAc/B,MAAO8B,EAAE9B,MAAOsB,YARd,SAACtB,GAAD,OAAmBF,EAAMuC,gBAAgBP,EAAEC,GAAI/B,EAAOF,EAAMiC,OAS5E,4BAAQd,QAZG,kBAAMnB,EAAMwC,WAAWR,EAAEC,GAAIjC,EAAMiC,MAY9C,SAYNQ,EAA+B,QAAjBzC,EAAM0C,OAAmB,gBAAkB,GACzDC,EAAkC,WAAjB3C,EAAM0C,OAAsB,gBAAkB,GAC/DE,EAAqC,cAAjB5C,EAAM0C,OAAyB,gBAAkB,GAE3E,OACI,6BACI,4BACI,kBAAC,EAAD,CAAcxC,MAAOF,EAAME,MAAOsB,YATlB,SAACtB,GAAD,OAAmBF,EAAM6C,oBAAoB3C,EAAOF,EAAMiC,OAU1E,4BAAQd,QAZG,kBAAMnB,EAAM8C,eAAe9C,EAAMiC,MAY5C,MAEJ,kBAAC,EAAD,CAAa3B,QAbL,SAACJ,GAAD,OAAmBF,EAAM+C,QAAQ7C,EAAOF,EAAMiC,OActD,4BACKJ,GAEL,6BACI,4BACIjB,UAAW6B,EACXtB,QAxBU,kBAAMnB,EAAMgD,aAAa,MAAOhD,EAAMiC,MAsBpD,OAKA,4BACIrB,UAAW+B,EACXxB,QA5Ba,kBAAMnB,EAAMgD,aAAa,SAAUhD,EAAMiC,MA0B1D,UAKA,4BACIrB,UAAWgC,EACXzB,QAhCgB,kBAAMnB,EAAMgD,aAAa,YAAahD,EAAMiC,MA8BhE,gB,QC2CDgB,MAtGf,WAAgB,IAAD,EACLC,EAAeC,cACfC,EAAeD,cAFV,EAGuBE,IAAMpD,SAA8B,CAClE,CAACgC,GAAIiB,EAAchD,MAAO,gBAAiBwC,OAAQ,OACnD,CAACT,GAAImB,EAAclD,MAAO,cAAewC,OAAQ,SAL1C,mBAGJY,EAHI,KAGOC,EAHP,OAQeF,IAAMpD,UAAN,mBACrBiD,EAAe,CACZ,CAACjB,GAAIkB,cAAMjD,MAAO,WAAYkC,QAAQ,GACtC,CAACH,GAAIkB,cAAMjD,MAAO,KAAMkC,QAAQ,GAChC,CAACH,GAAIkB,cAAMjD,MAAO,QAASkC,QAAQ,KAJjB,cAMrBgB,EAAe,CACZ,CAACnB,GAAIkB,cAAMjD,MAAO,OAAQkC,QAAQ,GAClC,CAACH,GAAIkB,cAAMjD,MAAO,OAAQkC,QAAQ,GAClC,CAACH,GAAIkB,cAAMjD,MAAO,OAAQkC,QAAQ,KAThB,IARf,mBAQJN,EARI,KAQG0B,EARH,KAqBLhB,EAAa,SAACiB,EAAgBC,GAChC5B,EAAM4B,GAAc5B,EAAM4B,GAAYhB,QAAO,SAAAV,GAAC,OAAIA,EAAEC,KAAOwB,KAC3DD,EAAS,eAAI1B,KAEXiB,EAAU,SAAC7C,EAAewD,GAC5B,IAAMC,EAAoB,CACtB1B,GAAIkB,cACJjD,MAAOA,EACPkC,QAAQ,GAEZN,EAAM4B,GAAN,CAAqBC,GAArB,mBAAiC7B,EAAM4B,KACvCF,EAAS,eAAI1B,KAEXQ,EAAmB,SAACmB,EAAgBrB,EAAiBsB,GACvD5B,EAAM4B,GAAc5B,EAAM4B,GACrB3B,KAAI,SAAAC,GAAC,OAAIA,EAAEC,KAAOwB,EAAT,eAAsBzB,EAAtB,CAAyBI,OAAQA,IAAUJ,KACzDwB,EAAS,eAAI1B,KAEXS,EAAkB,SAACkB,EAAgBvD,EAAewD,GACpD5B,EAAM4B,GAAc5B,EAAM4B,GACrB3B,KAAI,SAAAC,GAAC,OAAIA,EAAEC,KAAOwB,EAAT,eAAsBzB,EAAtB,CAAyB9B,MAAOA,IAAS8B,KACvDwB,EAAS,eAAI1B,KAEXkB,EAAe,SAACN,EAA0BgB,GAC5CH,EAAaD,EAAUvB,KAAI,SAAA6B,GAAE,OAAIA,EAAG3B,KAAOyB,EAAV,eAA2BE,EAA3B,CAA+BlB,OAAQA,IAAUkB,OAEhFd,EAAiB,SAACY,GACpBH,EAAaD,EAAUZ,QAAO,SAAAkB,GAAE,OAAIA,EAAG3B,KAAOyB,MAC9C,IAAMG,EAAS,eAAO/B,UACf+B,EAAUH,GACjBF,EAASK,IAYPhB,EAAsB,SAAC3C,EAAewD,GACxCH,EAAaD,EAAUvB,KAAI,SAAA6B,GAAE,OAAIA,EAAG3B,KAAOyB,EAAV,eAA2BE,EAA3B,CAA+B1D,MAAOA,IAAS0D,OAG9EE,EAAqBR,EAAUvB,KAAI,SAAA6B,GACrC,IAAIG,EAAmBjC,EAAM8B,EAAG3B,IAQhC,MAPkB,WAAd2B,EAAGlB,SACHqB,EAAmBjC,EAAM8B,EAAG3B,IAAIS,QAAO,SAAAV,GAAC,OAAKA,EAAEI,WAEjC,cAAdwB,EAAGlB,SACHqB,EAAmBjC,EAAM8B,EAAG3B,IAAIS,QAAO,SAAAV,GAAC,OAAIA,EAAEI,WAI9C,kBAAC,EAAD,CACIlB,IAAK0C,EAAG3B,GACRA,GAAI2B,EAAG3B,GACPS,OAAQkB,EAAGlB,OACXxC,MAAO0D,EAAG1D,MACV4B,MAAOiC,EACPhB,QAASA,EACTP,WAAYA,EACZM,eAAgBA,EAChBE,aAAcA,EACdV,iBAAkBA,EAClBC,gBAAiBA,EACjBM,oBAAqBA,OAKjC,OACI,yBAAKjC,UAAU,OACX,kBAAC,EAAD,CAAaN,QA3CD,SAACJ,GACjB,IAAM8D,EAAgBb,cAChBc,EAA4B,CAC9BhC,GAAI+B,EACJ9D,QACAwC,OAAQ,OAEZa,EAAa,GAAD,mBAAKD,GAAL,CAAgBW,KAC5BT,EAAS,eAAI1B,EAAL,eAAakC,EAAgB,SAoChCF,ICtGOI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SDqI5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA7E,GACL8E,QAAQ9E,MAAMA,EAAM+E,a","file":"static/js/main.2bc74b94.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nfunction AddItemForm(props: AddItemFormPropsType) {\r\n    const [title, setTitle] = useState<string>(\"\")\r\n    const [error, setError] = useState<boolean>(false)\r\n\r\n    const changeTitle = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setError(false)\r\n        setTitle(event.currentTarget.value)\r\n    }\r\n\r\n    const addItem = () => {\r\n        const trimmedTitle = title.trim()\r\n        if (trimmedTitle){\r\n            props.addItem(trimmedTitle)\r\n        } else {\r\n            setError(true)\r\n        }\r\n        setTitle(\"\")\r\n    }\r\n\r\n    const onKeyPressAddTask = (event: KeyboardEvent<HTMLInputElement>) => {\r\n        if(event.key === \"Enter\"){\r\n            addItem()\r\n        }\r\n    }\r\n\r\n    const userMsg = error ? <div style={{color: \"red\"}}>Title is required!</div> : null\r\n\r\n    return (\r\n        <div>\r\n            <input\r\n                className={error ? \"error\" : \"\"}\r\n                value={title}\r\n                onChange={changeTitle}\r\n                onKeyPress={onKeyPressAddTask}\r\n            />\r\n            <button onClick={addItem}>+</button>\r\n            {userMsg}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddItemForm;","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    changeTitle: (title: string) => void\r\n}\r\n\r\nfunction EditableSpan(props: EditableSpanPropsType) {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [title, setTitle] = useState<string>(props.title)\r\n\r\n    const changeTitle = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(event.currentTarget.value)\r\n    }\r\n    const onEditMode = () => setEditMode(true)\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.changeTitle(title)\r\n    }\r\n    const onKeyPressOffEditMode = (event: KeyboardEvent<HTMLInputElement>) => {\r\n        if (event.key === 'Enter') {\r\n            offEditMode()\r\n        }\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? <input\r\n                onChange={changeTitle}\r\n                value={title}\r\n                onBlur={offEditMode}\r\n                autoFocus={true}\r\n                onKeyPress={onKeyPressOffEditMode}\r\n            />\r\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n    )\r\n}\r\n\r\nexport default EditableSpan","import React, {ChangeEvent} from \"react\";\r\nimport {FilterValuesType} from \"./App\";\r\nimport AddItemForm from \"./Components/AddItemForm\";\r\nimport EditableSpan from \"./Components/EditableSpan/EditableSpan\";\r\n\r\ntype TodoListPropsType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskID: string, todoListID: string) => void\r\n    changeFilter: (filter: FilterValuesType, todoListID: string) => void\r\n    changeTaskStatus: (taskID: string, isDone: boolean, todoListID: string) => void\r\n    addTask: (title: string, todoListID: string) => void\r\n    removeTodolist: (todoListID: string) => void\r\n    changeTaskTitle: (taskID: string, todoListID: string, id: string) => void\r\n    changeTodoListTitle: (taskID: string, todoListID: string) => void\r\n}\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\nfunction TodoList(props: TodoListPropsType) {\r\n    const getTaskJSXElement = (t: TaskType) => {\r\n        const removeTask = () => props.removeTask(t.id, props.id)\r\n        const changeTaskStatus = (e: ChangeEvent<HTMLInputElement>) =>\r\n            props.changeTaskStatus(t.id, e.currentTarget.checked, props.id)\r\n        const changeTaskTitle = (title: string) => props.changeTaskTitle(t.id, title, props.id)\r\n        return (\r\n            <li key={t.id}>\r\n                <input\r\n                    type=\"checkbox\"\r\n                    checked={t.isDone}\r\n                    onChange={changeTaskStatus}\r\n                />\r\n                <EditableSpan title={t.title} changeTitle={changeTaskTitle}/>\r\n                <button onClick={removeTask}>X</button>\r\n            </li>\r\n        )\r\n    }\r\n    const tasksJSXElements = props.tasks.map(getTaskJSXElement)\r\n    const setAllFilterValue = () => props.changeFilter(\"all\", props.id)\r\n    const setActiveFilterValue = () => props.changeFilter(\"active\", props.id)\r\n    const setCompletedFilterValue = () => props.changeFilter(\"completed\", props.id)\r\n    const removeTodoList = () => props.removeTodolist(props.id)\r\n    const addTask = (title: string) => props.addTask(title, props.id)\r\n    const changeTodoListTitle = (title: string) => props.changeTodoListTitle(title, props.id)\r\n\r\n    const allBtnClass = props.filter === \"all\" ? \"active-filter\" : \"\"\r\n    const activeBtnClass = props.filter === \"active\" ? \"active-filter\" : \"\"\r\n    const completedBtnClass = props.filter === \"completed\" ? \"active-filter\" : \"\"\r\n\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <EditableSpan title={props.title} changeTitle={changeTodoListTitle}/>\r\n                <button onClick={removeTodoList}>X</button>\r\n            </h3>\r\n            <AddItemForm addItem={addTask}/>\r\n            <ul>\r\n                {tasksJSXElements}\r\n            </ul>\r\n            <div>\r\n                <button\r\n                    className={allBtnClass}\r\n                    onClick={setAllFilterValue}\r\n                >All\r\n                </button>\r\n                <button\r\n                    className={activeBtnClass}\r\n                    onClick={setActiveFilterValue}\r\n                >Active\r\n                </button>\r\n                <button\r\n                    className={completedBtnClass}\r\n                    onClick={setCompletedFilterValue}\r\n                >Completed\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoList;","import React from 'react';\r\nimport './App.css';\r\nimport TodoList, {TaskType} from \"./TodoList\";\r\nimport {v1} from \"uuid\";\r\nimport AddItemForm from \"./Components/AddItemForm\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\n\r\ntype TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\ntype TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction App() {\r\n    const todoListID_1 = v1()\r\n    const todoListID_2 = v1()\r\n    const [todoLists, setTodoLists] = React.useState<Array<TodoListType>>([\r\n        {id: todoListID_1, title: \"What to learn\", filter: \"all\"},\r\n        {id: todoListID_2, title: \"What to buy\", filter: \"all\"},\r\n    ])\r\n\r\n    const [tasks, setTasks] = React.useState<TasksStateType>({\r\n        [todoListID_1]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true},\r\n            {id: v1(), title: \"React\", isDone: false}\r\n        ],\r\n        [todoListID_2]: [\r\n            {id: v1(), title: \"Beer\", isDone: true},\r\n            {id: v1(), title: \"Fish\", isDone: true},\r\n            {id: v1(), title: \"Meat\", isDone: false}\r\n        ]\r\n    })\r\n\r\n    const removeTask = (taskID: string, todoListID: string) => {\r\n        tasks[todoListID] = tasks[todoListID].filter(t => t.id !== taskID)\r\n        setTasks({...tasks})\r\n    }\r\n    const addTask = (title: string, todoListID: string) => {\r\n        const newTask: TaskType = {\r\n            id: v1(),\r\n            title: title,\r\n            isDone: false\r\n        }\r\n        tasks[todoListID] = [newTask, ...tasks[todoListID]]\r\n        setTasks({...tasks})\r\n    }\r\n    const changeTaskStatus = (taskID: string, isDone: boolean, todoListID: string) => {\r\n        tasks[todoListID] = tasks[todoListID]\r\n            .map(t => t.id === taskID ? {...t, isDone: isDone} : t)\r\n        setTasks({...tasks})\r\n    }\r\n    const changeTaskTitle = (taskID: string, title: string, todoListID: string) => {\r\n        tasks[todoListID] = tasks[todoListID]\r\n            .map(t => t.id === taskID ? {...t, title: title} : t)\r\n        setTasks({...tasks})\r\n    }\r\n    const changeFilter = (filter: FilterValuesType, todoListID: string) => {\r\n        setTodoLists(todoLists.map(tl => tl.id === todoListID ? {...tl, filter: filter} : tl))\r\n    }\r\n    const removeTodolist = (todoListID: string) => {\r\n        setTodoLists(todoLists.filter(tl => tl.id !== todoListID))\r\n        const copyTasks = {...tasks}\r\n        delete copyTasks[todoListID]\r\n        setTasks(copyTasks)\r\n    }\r\n    const addTodoList = (title: string) => {\r\n        const newTodoListID = v1()\r\n        const newTodoList: TodoListType = {\r\n            id: newTodoListID,\r\n            title,\r\n            filter: \"all\"\r\n        }\r\n        setTodoLists([...todoLists, newTodoList])\r\n        setTasks({...tasks, [newTodoListID]: []})\r\n    }\r\n    const changeTodoListTitle = (title: string, todoListID: string) => {\r\n        setTodoLists(todoLists.map(tl => tl.id === todoListID ? {...tl, title: title} : tl))\r\n    }\r\n\r\n    const todoListComponents = todoLists.map(tl => {\r\n        let tasksForTodoList = tasks[tl.id]\r\n        if (tl.filter === \"active\") {\r\n            tasksForTodoList = tasks[tl.id].filter(t => !t.isDone)\r\n        }\r\n        if (tl.filter === \"completed\") {\r\n            tasksForTodoList = tasks[tl.id].filter(t => t.isDone)\r\n        }\r\n\r\n        return (\r\n            <TodoList\r\n                key={tl.id}\r\n                id={tl.id}\r\n                filter={tl.filter}\r\n                title={tl.title}\r\n                tasks={tasksForTodoList}\r\n                addTask={addTask}\r\n                removeTask={removeTask}\r\n                removeTodolist={removeTodolist}\r\n                changeFilter={changeFilter}\r\n                changeTaskStatus={changeTaskStatus}\r\n                changeTaskTitle={changeTaskTitle}\r\n                changeTodoListTitle={changeTodoListTitle}\r\n            />\r\n        )\r\n    })\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AddItemForm addItem={addTodoList}/>\r\n            {todoListComponents}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}