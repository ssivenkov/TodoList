{"version":3,"sources":["TodoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TodoList","props","useState","title","setTitle","error","setError","tasksJSXElements","tasks","map","t","key","id","type","checked","isDone","onChange","e","changeTaskStatus","currentTarget","onClick","removeTask","addTask","trimmedTitle","trim","allBtnClass","filter","activeBtnClass","completedBtnClass","userMsg","style","color","removeTodolist","className","value","event","onKeyPress","changeFilter","App","todoListID_1","v1","todoListID_2","React","todoLists","setTodoLists","setTasks","taskID","todoListID","newTask","tl","copyTasks","todoListComponents","tasksForTodoList","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.67b464c6.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {FilterValuesType} from \"./App\";\r\n\r\ntype TodoListPropsType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskID: string, todoListID: string) => void\r\n    changeFilter: (filter: FilterValuesType, todoListID: string) => void\r\n    changeTaskStatus: (taskID: string, isDone: boolean, todoListID: string) => void\r\n    addTask: (title: string, todoListID: string) => void\r\n    removeTodolist: (todoListID: string) => void\r\n}\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\nfunction TodoList(props: TodoListPropsType) {\r\n    const [title, setTitle] = useState<string>(\"\")\r\n    const [error, setError] = useState<boolean>(false)\r\n\r\n    const getTaskJSXElement = (t: TaskType) => {\r\n        const removeTask = () => props.removeTask(t.id, props.id)\r\n        const changeTaskStatus = (e: ChangeEvent<HTMLInputElement>) =>\r\n            props.changeTaskStatus(t.id, e.currentTarget.checked, props.id)\r\n        return (\r\n            <li key={t.id}>\r\n                <input\r\n                    type=\"checkbox\"\r\n                    checked={t.isDone}\r\n                    onChange={changeTaskStatus}\r\n                />\r\n                <span>{t.title}</span>\r\n                <button onClick={removeTask}>X</button>\r\n            </li>\r\n        )\r\n    }\r\n    const tasksJSXElements = props.tasks.map(getTaskJSXElement)\r\n\r\n    const addTask = () => {\r\n        const trimmedTitle = title.trim()\r\n        if (trimmedTitle){\r\n            props.addTask(trimmedTitle, props.id)\r\n        } else {\r\n            setError(true)\r\n        }\r\n        setTitle(\"\")\r\n    }\r\n    const changeTitle = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setError(false)\r\n        setTitle(event.currentTarget.value)\r\n    }\r\n    const onKeyPressAddTask = (event: KeyboardEvent<HTMLInputElement>) => {\r\n        if(event.key === \"Enter\"){\r\n            addTask()\r\n        }\r\n    }\r\n    const setAllFilterValue = () => props.changeFilter(\"all\", props.id)\r\n    const setActiveFilterValue = () => props.changeFilter(\"active\", props.id)\r\n    const setCompletedFilterValue = () => props.changeFilter(\"completed\", props.id)\r\n    const removeTodoList = () => props.removeTodolist(props.id)\r\n    const allBtnClass = props.filter === \"all\" ? \"active-filter\" : \"\"\r\n    const activeBtnClass = props.filter === \"active\" ? \"active-filter\" : \"\"\r\n    const completedBtnClass = props.filter === \"completed\" ? \"active-filter\" : \"\"\r\n    const userMsg = error ? <div style={{color: \"red\"}}>Title is required!</div> : null\r\n\r\n    // JSX\r\n    return (\r\n        <div>\r\n            <h3>{props.title}<button onClick={removeTodoList}>X</button></h3>\r\n            <div>\r\n                <input\r\n                    className={error ? \"error\" : \"\"}\r\n                    value={title}\r\n                    onChange={changeTitle}\r\n                    onKeyPress={onKeyPressAddTask}\r\n                />\r\n                <button onClick={addTask}>+</button>\r\n                {userMsg}\r\n            </div>\r\n            <ul>\r\n                {tasksJSXElements}\r\n            </ul>\r\n            <div>\r\n                <button\r\n                    className={allBtnClass}\r\n                    onClick={setAllFilterValue}\r\n                >All\r\n                </button>\r\n                <button\r\n                    className={activeBtnClass}\r\n                    onClick={setActiveFilterValue}\r\n                >Active\r\n                </button>\r\n                <button\r\n                    className={completedBtnClass}\r\n                    onClick={setCompletedFilterValue}\r\n                >Completed\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoList;","import React from 'react';\r\nimport './App.css';\r\nimport TodoList, {TaskType} from \"./TodoList\";\r\nimport {v1} from \"uuid\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\n\r\ntype TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\ntype TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction App() {\r\n    const todoListID_1 = v1()\r\n    const todoListID_2 = v1()\r\n    const [todoLists, setTodoLists] = React.useState<Array<TodoListType>>([\r\n        {id: todoListID_1, title: \"What to learn\", filter: \"all\"},\r\n        {id: todoListID_2, title: \"What to buy\", filter: \"all\"},\r\n    ])\r\n\r\n    const [tasks, setTasks] = React.useState<TasksStateType>({\r\n        [todoListID_1]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true},\r\n            {id: v1(), title: \"React\", isDone: false}\r\n        ],\r\n        [todoListID_2]: [\r\n            {id: v1(), title: \"Beer\", isDone: true},\r\n            {id: v1(), title: \"Fish\", isDone: true},\r\n            {id: v1(), title: \"Meat\", isDone: false}\r\n        ]\r\n    })\r\n\r\n    const removeTask = (taskID: string, todoListID: string) => {\r\n        tasks[todoListID] = tasks[todoListID].filter(t => t.id !== taskID)\r\n        setTasks({...tasks})\r\n    }\r\n    const addTask = (title: string, todoListID: string) => {\r\n        const newTask: TaskType = {\r\n            id: v1(),\r\n            title: title,\r\n            isDone: false\r\n        }\r\n        tasks[todoListID] = [newTask, ...tasks[todoListID]]\r\n        setTasks({...tasks})\r\n    }\r\n    const changeTaskStatus = (taskID: string, isDone: boolean, todoListID: string) => {\r\n        tasks[todoListID] = tasks[todoListID]\r\n            .map(t => t.id === taskID ? {...t, isDone} : t)\r\n        setTasks({...tasks})\r\n    }\r\n    const changeFilter = (filter: FilterValuesType, todoListID: string) => {\r\n        setTodoLists(todoLists.map(tl => tl.id === todoListID ? {...tl, filter: filter} : tl))\r\n    }\r\n    const removeTodolist = (todoListID: string) => {\r\n        setTodoLists(todoLists.filter(tl => tl.id !== todoListID))\r\n        const copyTasks = {...tasks}\r\n        delete copyTasks[todoListID]\r\n        setTasks(copyTasks)\r\n    }\r\n\r\n    const todoListComponents = todoLists.map(tl => {\r\n        let tasksForTodoList = tasks[tl.id]\r\n        if (tl.filter === \"active\") {\r\n            tasksForTodoList = tasks[tl.id].filter(t => !t.isDone)\r\n        }\r\n        if (tl.filter === \"completed\") {\r\n            tasksForTodoList = tasks[tl.id].filter(t => t.isDone)\r\n        }\r\n\r\n        return (\r\n            <TodoList\r\n                key={tl.id}\r\n                id={tl.id}\r\n                filter={tl.filter}\r\n                title={tl.title}\r\n                tasks={tasksForTodoList}\r\n                addTask={addTask}\r\n                removeTask={removeTask}\r\n                removeTodolist={removeTodolist}\r\n                changeFilter={changeFilter}\r\n                changeTaskStatus={changeTaskStatus}\r\n            />\r\n        )\r\n    })\r\n\r\n    // GUI (CRUD):\r\n    return (\r\n        <div className=\"App\">\r\n            {todoListComponents}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}